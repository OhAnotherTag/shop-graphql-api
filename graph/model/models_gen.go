// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"gorm.io/gorm"
)

type Category struct {
	*gorm.Model
	ID       int        `gorm:"primaryKey" json:"id"`
	Name     string     `gorm:"not null" json:"name"`
	Products []*Product `gorm:"foreignKey:CategoryID" json:"products"`
}

type Inventory struct {
	Products []*Product `json:"products"`
	Count    int        `json:"count"`
}

type NewCategory struct {
	Name string `json:"name"`
}

type NewProduct struct {
	Title       string  `json:"title"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	CategoryID  int     `json:"categoryId"`
}

type Product struct {
	*gorm.Model
	ID          int     `gorm:"primaryKey" json:"id"`
	Title       string  `gorm:"not null" json:"title"`
	Description string  `gorm:"not null" json:"description"`
	Price       float64 `gorm:"not null" json:"price"`
	CategoryID  int     `json:"categoryId"`
}

type ProductOrderByInput struct {
	Description *Sort `json:"description"`
	Title       *Sort `json:"title"`
	CreatedAt   *Sort `json:"createdAt"`
}

type User struct {
	*gorm.Model
	ID       string     `gorm:"primaryKey" json:"id"`
	Name     string     `gorm:"not null" json:"name"`
	Email    string     `gorm:"not null" json:"email"`
	Password string     `gorm:"not null" json:"password"`
	Cart     []*Product `gorm:"many2many:cart;" json:"cart"`
}

type Sort string

const (
	SortAsc  Sort = "ASC"
	SortDesc Sort = "DESC"
)

var AllSort = []Sort{
	SortAsc,
	SortDesc,
}

func (e Sort) IsValid() bool {
	switch e {
	case SortAsc, SortDesc:
		return true
	}
	return false
}

func (e Sort) String() string {
	return string(e)
}

func (e *Sort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sort", str)
	}
	return nil
}

func (e Sort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
